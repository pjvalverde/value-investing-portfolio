import React, { useState } from 'react';
import { CONFIG } from './config';
import PortfolioForm from './components/PortfolioForm';
import PortfolioTable from './components/PortfolioTable';
import { 
  Container, 
  Typography, 
  Button, 
  CircularProgress, 
  Paper, 
  Alert 
} from '@mui/material';

function App() {
  // URL base del backend
  const BACKEND_URL = CONFIG.BACKEND_URL;
  
  // Estados para manejar los datos y el flujo
  const [formData, setFormData] = useState(null);
  const [valueData, setValueData] = useState(null);
  const [growthData, setGrowthData] = useState(null);
  const [bondsData, setBondsData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(0); // 0=form, 1=value, 2=growth, 3=bonds, 4=show
  const [error, setError] = useState('');
  const [analysis, setAnalysis] = useState('');

  // Función para conectar con el backend real (sin simulación)
  const fetchPortfolio = async (type) => {
    if (!formData) return null;
    
    setLoading(true);
    setError('');
    
    try {
      let endpoint = '';
      
      switch(type) {
        case 'value':
          endpoint = '/api/portfolio/value';
          break;
        case 'growth':
          endpoint = '/api/portfolio/growth';
          break;
        case 'bonds':
          endpoint = '/api/portfolio/bonds';
          break;
        default:
          throw new Error('Tipo de portafolio no válido');
      }
      
      const response = await fetch(`${BACKEND_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          amount: formData.amount,
          horizon: formData.horizon,
          risk_profile: formData.riskProfile
        })
      });
      
      if (!response.ok) {
        throw new Error(`Error del servidor: ${response.status}`);
      }
      
      const data = await response.json();
      return data;
      
    } catch (err) {
      console.error('Error al obtener el portafolio:', err);
      setError(`Error al cargar el portafolio: ${err.message}`);
      return null;
    } finally {
      setLoading(false);
    }
  };

  // Función para obtener análisis de Claude una vez que tenemos todos los datos
  const fetchClaudeAnalysis = async () => {
    if (!valueData || !growthData || !bondsData) return;
    
    try {
      setLoading(true);
      setError('');
      
      const portfolio = {
        value: valueData.portfolio || [],
        growth: growthData.portfolio || [],
        bonds: bondsData.portfolio || []
      };
      
      const response = await fetch(`${BACKEND_URL}/api/portfolio/analysis`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          portfolio: portfolio,
          amount: formData.amount,
          horizon: formData.horizon,
          risk_profile: formData.riskProfile,
          language: 'es'
        })
      });
      
      if (!response.ok) {
        throw new Error(`Error del servidor: ${response.status}`);
      }
      
      const data = await response.json();
      setAnalysis(data.analysis || 'No se pudo generar el análisis');
      
    } catch (err) {
      console.error('Error al obtener el análisis:', err);
      setError(`Error al generar el análisis: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Manejador del formulario inicial
  const handleFormSubmit = (data) => {
    setFormData(data);
    setStep(1); // Ir al primer paso (Value)
  };

  // Manejadores para los botones secuenciales
  const handleFetchValue = async () => {
    const data = await fetchPortfolio('value');
    if (data) {
      setValueData(data);
      setStep(2); // Ir al siguiente paso (Growth)
    }
  };
  
  const handleFetchGrowth = async () => {
    const data = await fetchPortfolio('growth');
    if (data) {
      setGrowthData(data);
      setStep(3); // Ir al siguiente paso (Bonds)
    }
  };
  
  const handleFetchBonds = async () => {
    const data = await fetchPortfolio('bonds');
    if (data) {
      setBondsData(data);
      setStep(4); // Ir al paso final (Mostrar resultados)
      // Una vez que tenemos todos los datos, obtenemos el análisis
      await fetchClaudeAnalysis();
    }
  };

  return (
    <div className="App" style={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
      <header style={{
        backgroundColor: '#1976d2',
        color: 'white',
        padding: '1rem 0',
        marginBottom: '2rem',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        <Container maxWidth="lg">
          <Typography variant="h4" component="h1" style={{ fontWeight: 'bold' }}>
            Value Investing Portfolio
          </Typography>
          <Typography variant="subtitle1">
            Herramienta para construir portafolios de inversión basados en valor
          </Typography>
        </Container>
      </header>

      <main>
        <Container maxWidth="lg">
          {step === 0 && (
            <PortfolioForm onSubmit={handleFormSubmit} loading={loading} />
          )}
          
          {step > 0 && (
            <div style={{ marginTop: '2rem' }}>
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                marginBottom: '2rem',
                padding: '1rem',
                backgroundColor: 'white',
                borderRadius: '8px',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
              }}>
                <Button 
                  variant={step >= 1 ? 'contained' : 'outlined'}
                  color="primary"
                  onClick={handleFetchValue}
                  disabled={loading}
                >
                  {valueData ? '✓ Value' : '1. Value'}
                </Button>
                
                <Button 
                  variant={step >= 2 ? 'contained' : 'outlined'}
                  color="primary"
                  onClick={handleFetchGrowth}
                  disabled={step < 1 || loading}
                >
                  {growthData ? '✓ Growth' : '2. Growth'}
                </Button>
                
                <Button 
                  variant={step >= 3 ? 'contained' : 'outlined'}
                  color="primary"
                  onClick={handleFetchBonds}
                  disabled={step < 2 || loading}
                >
                  {bondsData ? '✓ Bonds' : '3. Bonds'}
                </Button>
              </div>
              
              {loading && (
                <div style={{ textAlign: 'center', margin: '2rem 0' }}>
                  <CircularProgress />
                  <p style={{ marginTop: '1rem' }}>Procesando, por favor espere...</p>
                </div>
              )}
              
              {error && (
                <Alert severity="error" style={{ margin: '1rem 0' }}>
                  {error}
                </Alert>
              )}
              
              {step === 4 && !loading && (
                <div>
                  <Typography variant="h5" gutterBottom>
                    Análisis de tu portafolio
                  </Typography>
                  
                  <Paper style={{ padding: '2rem', margin: '1rem 0' }}>
                    <Typography variant="body1" style={{ whiteSpace: 'pre-line' }}>
                      {analysis || 'Generando análisis...'}
                    </Typography>
                  </Paper>
                  
                  <div style={{ marginTop: '2rem' }}>
                    <Typography variant="h6" gutterBottom>
                      Resumen del portafolio
                    </Typography>
                    
                    <PortfolioTable 
                      valueData={valueData}
                      growthData={growthData}
                      bondsData={bondsData}
                      amount={formData.amount}
                    />
                  </div>
                </div>
              )}
            </div>
          )}
        </Container>
      </main>
      
      <footer style={{
        marginTop: '4rem',
        padding: '2rem 0',
        backgroundColor: '#f5f5f5',
        borderTop: '1px solid #e0e0e0',
        textAlign: 'center'
      }}>
        <Container maxWidth="lg">
          <Typography variant="body2" color="textSecondary">
            © {new Date().getFullYear()} Value Investing Portfolio - Herramienta educativa
          </Typography>
          <Typography variant="caption" display="block" color="textSecondary" style={{ marginTop: '0.5rem' }}>
            Los datos mostrados son con fines informativos y no constituyen asesoramiento financiero.
          </Typography>
        </Container>
      </footer>
    </div>
  );
}

export default App;
