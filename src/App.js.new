import React, { useState } from 'react';
import PortfolioForm from './components/PortfolioForm';
import PortfolioTable from './components/PortfolioTable';

function App() {
  // URL base del backend
  const BACKEND_URL = 'https://value-investing-5b425882ff1a.herokuapp.com';
  
  // Estados para manejar los datos y el flujo
  const [formData, setFormData] = useState(null);
  const [valueData, setValueData] = useState(null);
  const [growthData, setGrowthData] = useState(null);
  const [bondsData, setBondsData] = useState(null);
  const [combinedPortfolio, setCombinedPortfolio] = useState([]);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(0); // 0=form, 1=value, 2=growth, 3=bonds, 4=show
  const [error, setError] = useState('');
  const [analysis, setAnalysis] = useState('');

  // Función para conectar con el backend real (sin simulación)
  const fetchPortfolio = async (type) => {
    if (!formData) return null;
    
    setLoading(true);
    setError('');
    
    try {
      let endpoint = '';
      
      switch(type) {
        case 'value':
          endpoint = '/api/portfolio/value';
          break;
        case 'growth':
          endpoint = '/api/portfolio/growth';
          break;
        case 'bonds':
          endpoint = '/api/portfolio/bonds';
          break;
        default:
          throw new Error('Tipo de portafolio no válido');
      }
      
      const response = await fetch(`${BACKEND_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          amount: parseFloat(formData.amount),
          horizon: formData.horizon,
          sectors: formData.sectors
        })
      });
      
      if (!response.ok) {
        throw new Error(`Error en la respuesta del servidor: ${response.status}`);
      }
      
      const data = await response.json();
      return data;
    } catch (e) {
      setError(`Error al conectar con el backend para ${type}: ${e.message}`);
      return null;
    } finally {
      setLoading(false);
    }
  };

  // Función para obtener análisis de Claude una vez que tenemos todos los datos
  const fetchClaudeAnalysis = async () => {
    try {
      setLoading(true);
      
      // Combinar todos los datos de las acciones
      const portfolio = {
        value: valueData?.allocation || [],
        growth: growthData?.allocation || [],
        bonds: bondsData?.allocation || []
      };
      
      // Convertir a un formato plano para mostrar en la tabla
      const flatPortfolio = [
        ...portfolio.value.map(item => ({...item, tipo: 'value'})),
        ...portfolio.growth.map(item => ({...item, tipo: 'growth'})),
        ...portfolio.bonds.map(item => ({...item, tipo: 'bonds'}))
      ];
      
      setCombinedPortfolio(flatPortfolio);
      
      // Llamar a la API de Claude para análisis
      const response = await fetch(`${BACKEND_URL}/api/portfolio/analysis`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          portfolio: portfolio,
          strategy_description: `Portafolio para horizonte ${formData.horizon} con monto ${formData.amount}`,
          language: 'es'
        })
      });
      
      if (!response.ok) {
        throw new Error(`Error al obtener análisis: ${response.status}`);
      }
      
      const data = await response.json();
      setAnalysis(data.analysis || 'No se pudo obtener análisis detallado');
    } catch (e) {
      setError(`Error al obtener análisis: ${e.message}`);
      setAnalysis('No se pudo obtener el análisis cualitativo');
    } finally {
      setLoading(false);
    }
  };

  // Manejador del formulario inicial
  const handleFormSubmit = (data) => {
    setFormData(data);
    setStep(1);
  };

  // Manejadores para los botones secuenciales
  const handleFetchValue = async () => {
    const data = await fetchPortfolio('value');
    if (data) {
      setValueData(data);
      setStep(2);
    }
  };
  
  const handleFetchGrowth = async () => {
    const data = await fetchPortfolio('growth');
    if (data) {
      setGrowthData(data);
      setStep(3);
    }
  };
  
  const handleFetchBonds = async () => {
    const data = await fetchPortfolio('bonds');
    if (data) {
      setBondsData(data);
      setStep(4);
      // Una vez que tenemos todos los datos, solicitamos el análisis de Claude
      await fetchClaudeAnalysis();
    }
  };

  return (
    <div style={{ maxWidth: 600, margin: '40px auto', background: '#fff', borderRadius: 12, boxShadow: '0 2px 8px #0001', padding: 24 }}>
      <h1 style={{ textAlign: 'center', marginBottom: 24 }}>Value Investing Portfolio App</h1>
      {error && <div style={{ color: 'red', marginBottom: 16 }}>{error}</div>}
      
      {/* Formulario inicial */}
      {step === 0 && <PortfolioForm onSubmit={handleFormSubmit} loading={loading} />}
      
      {/* Botón para buscar Value */}
      {step === 1 && (
        <button 
          onClick={handleFetchValue} 
          disabled={loading} 
          style={{ width: '100%', padding: 16, fontSize: 18, backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: 8, cursor: loading ? 'not-allowed' : 'pointer' }}
        >
          {loading ? 'Buscando Value...' : 'Buscar Value (máx. 5)'}
        </button>
      )}
      
      {/* Botón para buscar Growth */}
      {step === 2 && (
        <button 
          onClick={handleFetchGrowth} 
          disabled={loading} 
          style={{ width: '100%', padding: 16, fontSize: 18, backgroundColor: '#2196F3', color: 'white', border: 'none', borderRadius: 8, cursor: loading ? 'not-allowed' : 'pointer' }}
        >
          {loading ? 'Buscando Growth...' : 'Buscar Growth (máx. 5)'}
        </button>
      )}
      
      {/* Botón para buscar Bonos/ETF */}
      {step === 3 && (
        <button 
          onClick={handleFetchBonds} 
          disabled={loading} 
          style={{ width: '100%', padding: 16, fontSize: 18, backgroundColor: '#9C27B0', color: 'white', border: 'none', borderRadius: 8, cursor: loading ? 'not-allowed' : 'pointer' }}
        >
          {loading ? 'Buscando Bonos/ETF...' : 'Buscar Bonos y ETF (máx. 2)'}
        </button>
      )}
      
      {/* Visualización de resultados */}
      {step === 4 && (
        <>
          <h2 style={{ margin: '32px 0 16px 0' }}>Portafolio Combinado</h2>
          <PortfolioTable portfolio={combinedPortfolio} />
          <div style={{ margin: '32px 0 0 0', background: '#f8f9fa', padding: 16, borderRadius: 8 }}>
            <h3>Análisis Claude</h3>
            <div>{analysis}</div>
          </div>
        </>
      )}
    </div>
  );
}

export default App;
